// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")

}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model College {
    id        Int       @id @default(autoincrement())
    name      String    @unique @default("Chennai Institute of Technology")
    shortName String    @unique @default("CIT")
    Students  Student[]
}

model Student {
    id             Int        @id @default(autoincrement())
    name           String
    registerNumber String     @unique
    gender         Gender
    Department     Department @relation(fields: [departmentId], references: [id])
    Year           Year       @relation(fields: [yearId], references: [id])
    Degree         Degree     @relation(fields: [degreeId], references: [id])
    College        College    @relation(fields: [collegeId], references: [id])
    collegeId      Int
    departmentId   Int
    yearId         Int
    degreeId       Int
    phone_number   String?
}

model Year {
    id       Int       @id @default(autoincrement())
    year     Int       @unique
    Students Student[]
}

model Degree {
    id          Int          @id @default(autoincrement())
    degree      String       @unique
    fullName    String
    duration    Int
    type        DegreeType
    Departments Department[]
    Students    Student[]
}

model Department {
    id        Int       @id @default(autoincrement())
    branch    String    @unique
    shortName String    @unique
    code      String
    Degree    Degree    @relation(fields: [degreeId], references: [id])
    Students  Student[]
    degreeId  Int
}

enum DegreeType {
    Bachelors
    Masters
    PhD
}

enum Gender {
    Male
    Female
}
